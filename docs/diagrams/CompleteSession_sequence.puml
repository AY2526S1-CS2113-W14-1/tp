@startuml
actor User
participant FitnessONE as "FitnessONE.run"
participant Ui as "Ui"
participant Parser as "Parser"
participant CompleteCmd as "CompleteSessionCommand"
participant Coach as "Coach"
participant Athlete as "Athlete"
participant Session as "Session"
participant Storage as "StorageManager"

User -> FitnessONE : type "/completeSession 0123 001"
activate FitnessONE

FitnessONE -> Ui : readCommand()
activate Ui
Ui --> FitnessONE : input
deactivate Ui

FitnessONE -> Parser : parse(input)
activate Parser
' Parser constructs the command so activation bar starts at command header
Parser -> CompleteCmd ++ : new CompleteSessionCommand("0123","001")
CompleteCmd --> Parser -- : constructed
Parser --> FitnessONE : CompleteSessionCommand instance
deactivate Parser

FitnessONE -> CompleteCmd : execute(coachController, view)
activate CompleteCmd

== Command resolves athlete and session ==
CompleteCmd -> Coach : accessAthleteID("0123")
activate Coach
Coach --> CompleteCmd : Athlete
CompleteCmd -> Coach : accessSessionID(Athlete, "001")
Coach --> CompleteCmd : Session
deactivate Coach

== Command completes session ==
CompleteCmd -> Session : setCompleted()
activate Session
Session --> CompleteCmd : confirmed
deactivate Session

CompleteCmd -> Ui : printWithDivider("Session (ID: 001) completed ...")
activate Ui
Ui --> CompleteCmd : printed
deactivate Ui

CompleteCmd --> FitnessONE : execute returns
deactivate CompleteCmd

FitnessONE -> Storage : save(coachController)
activate Storage
Storage --> FitnessONE : saved
deactivate Storage

deactivate FitnessONE
@enduml
